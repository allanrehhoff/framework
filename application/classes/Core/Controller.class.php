<?php
namespace Core {
	use Exception, Registry, DOM;

	/**
	* The core controller which subcontrollers should extend upon.
	* @author Allan Thue Rehhoff
	*/
	abstract class Controller {

		/**
		* @var Holds the current application instance.
		*/
		protected $application;

		/**
		* @var Holds the DOM\Document instance
		*/
		protected $document;

		/**
		* @var Path to the current view that should be displayed.
		*/
		protected $view;

		/**
		* @var $_GET and $_POST merged together.
		*/
		protected $request;

		/**
		* @var Page title to be displayed
		*/
		protected $title;

		/**
		* @var Variable data generated by extending controllers.
		*/
		protected $data = [];

		/**
		* @var The current them instance.
		*/
		public $theme;

		/**
		* Child controllers should declare this function instead of a constructor.
		*/
		abstract protected function index();

		/**
		* Constructs the overall environment, setting up helpers and initial variables.
		* By making this final child controllers don't need to call parent::__construct().
		* @uses \Registry
		* @uses \DOM\Document
		* @uses \Core\Theme
		* @return void
		*/
		final public function __construct() {
			$this->initialize();
		}

		/**
		* Boots up constructor and controller variables.
		* @return void
		*/
		final public function initialize() {
			$this->request = $_GET + $_POST;
			$this->configuration = Registry::get("Core\Configuration");
			$this->application = Registry::get("Core\Application");
			$this->view = $this->application->arg(0);

			$this->database = new \Database\Connection(
				$this->configuration->get("database.host"),
				$this->configuration->get("database.username"),
				$this->configuration->get("database.password"),
				$this->configuration->get("database.name")
			);

			$this->setTitle(array_slice($this->application->arg(), -1)[0]);

			$this->document = Registry::set(new DOM\Document);
			$this->theme = Registry::set(new Theme($this->configuration->get("theme")));
		}

		/**
		* Contains accessible theme variables.
		* @uses \DOM\Document
		* @return void
		*/
		final public function assemble() {
			if($this->configuration->get("cache.max_age") > 0) {
				header("Cache-Control: max-age=".(int)$this->configuration->get("cache.max_age"));
				header("Cache-Control: post-check=1, pre-check=1", false);
				header("Pragma: cache");
			} else {
				header("Cache-Control: no-store, no-cache, must-revalidate, max-age=0");
				header("Cache-Control: post-check=0, pre-check=0", false);
				header("Pragma: no-cache");
			}

			$this->data["header"] = $this->getView("header");
			$this->data["footer"] = $this->getView("footer");

			$this->data["stylesheets"] = DOM\Document::getStylesheets();
			$this->data["javascript"]  = DOM\Document::getJavascript("footer");
		}

		/**
		* Provides data set by extending controllers.
		* @return array
		*/
		final public function getData() {
			return $this->data;
		}

		/**
		* Set a dynamic value for the title tag.
		* @param (string) $title a title to display in a template file.
		* @return void
		*/
		final public function setTitle($title) {
			$this->data["title"] = sprintf($this->configuration->get("base_title"), $title);
		}

		/**
		* Get the current page title to be displayed.
		* @return string
		*/
		final public function getTitle() {
			return $this->data["title"];
		}

		/**
		* Get the path to a template file, ommit .tpl.php extension
		* @param (string) $template name of the template file to get path for,
		* @return string
		*/
		final public function getView($template = null) {
			if($template === null) {
				$template = $this->view;
			}

			return $this->theme->getTemplatePath(basename($template).".tpl.php");
		}

		/**
		* Checks if the requested controller has a corresponding view.
		* @return bool
		*/
		final public function hasView() {
			return file_exists($this->getView()) && !CLI;
		}

		/**
		* Convenience wrapper, for setting/overriding a view within any controller
		* @param Name of the view to use, without .tpl.php extensions.
		* @return bool
		*/
		final protected function setView($view) {
			$this->view = $view;
		}
	}
}