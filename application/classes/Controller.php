<?php
	/**
	* The core controller which subcontrollers should extend upon.
	* @author Allan Thue Rehhoff
	*/
	abstract class Controller {

		/**
		* @var \Core\Application Holds the current application instance.
		*/
		protected $iApplication;

		/**
		* @var \Document Holds the \Document instance
		*/
		protected $iDocument;

		/**
		* @var \Core\Configuration Holds the \Configuration instance
		*/
		protected $iConfiguration;

		/**
		* @var \Database\Connection Holds the \Database instance
		*/
		protected $iDatabase;

		/**
		* @var string Path to the current view that should be displayed.
		*/
		protected $view = '';

		/**
		* @var object $_GET, $_POST, $_FILES and $_COOKIE merged together.
		*/
		protected $request;

		/**
		* @var string Page title to be displayed
		*/
		protected $title;

		/**
		* @var array Variable data generated by extending controllers.
		*/
		protected $data = [];

		/**
		* @var \Core\Theme The current theme instance.
		*/
		protected $iTheme;

		/**
		* @var array Child controllers classes to be executed when the main one finalizes.
		*/
		protected $children = [];

		/**
		* Child controllers should declare this function instead of a constructor.
		*/
		abstract protected function index();

		/**
		* Constructs the overall environment, setting up helpers and initial variables.
		* @return void
		*/
		public function __construct() {
			
		}

		/**
		* Boots up constructor and controller variables.
		* @return void
		*/
		final public function initialize() : void {
			$this->iApplication  = Registry::get("Core\Application");
			$this->iDatabase 	 = Registry::get("Database\Connection");

			$this->iConfiguration = $this->iApplication->getConfiguration();

			$this->setTitle(array_slice($this->iApplication->getArgs(), -1)[0]);

			if(CLI === false) {
				$this->request = (object) [
					"get" => $_GET,
					"post" => $_POST,
					"files" => $_FILES,
					"cookie" => $_COOKIE
				];

				$this->iAssets = Registry::set(new \Assets);
				$this->iTheme 	 = Registry::set(new \Core\Theme($this->iConfiguration->get("theme")));

				$this->data["header"] = $this->getView("header");
				$this->data["footer"] = $this->getView("footer");
		
				$this->data["current"] = $this->iApplication->arg(0);		
			}
		}
		
		/**
		 * Contains accessible theme variables.
		 * @uses \Document
		 * @return void
		 */
		final public function finalize() : void {
			// These are put here, to allow controller methods to add/overwrite assets
			$this->data["stylesheets"] = $this->iAssets->getStylesheets();
			$this->data["javascript"]  = $this->iAssets->getJavascript("footer");
		}

		/**
		* Provides data set by extending controllers.
		* @return array
		*/
		final public function getData() : array {
			return $this->data;
		}

		/**
		* Set a dynamic value for the title tag.
		* @param string $title a title to display in a template file.
		* @return void
		*/
		final public function setTitle(string $title) : void {
			$this->data["title"] = sprintf($this->iConfiguration->get("base_title"), $title);
		}

		/**
		* Get the current page title to be displayed.
		* @return string
		*/
		final public function getTitle() : string {
			return $this->data["title"];
		}

		/**
		* Get the path to a template file, ommit .tpl.php extension
		* @param string $template name of the template file to get path for,
		* @return string
		*/
		final public function getView(string $template = null) : string {
			if($template === null) {
				$template = $this->view;
			}

			$view = $this->iTheme->getTemplatePath($template.".tpl.php");

			return $view;
		}

		/**
		* Checks if the requested controller has a corresponding view.
		* @return bool
		*/
		final public function hasView() : bool {
			return file_exists($this->getView()) && !CLI;
		}

		/**
		* Convenience wrapper, for setting/overriding a view within any controller
		* @param string name of the view to use, without .tpl.php extensions.
		* @return bool
		*/
		final public function setView(string $view) : void {
			$this->view = $view;
		}

		/**
		 * Get names of children controllers
		 * @return array
		 */
		public function getChildren() : array {
			return $this->children;
		}

		/**
		 * Add data to current controller
		 * This method should not allow child controllers
		 * to override parent controllers data,
		 * if we did, the title data variable ends up being empty
		 * due the to initialize(); method setting a default value
		 * @param array $data Array of data to add to the stack
		 * @return void
		 */
		final public function addData(array $data) : void {
			foreach($data as $key => $val) {
				if(!isset($this->data[$key])) {
					$this->data[$key] = $val;
				}
			}
		}
	}