<?php
	/**
	* The core controller which subcontrollers should extend upon.
	* @author Allan Thue Rehhoff
	*/
	abstract class Controller {
		/**
		 * @var \Controller Holds the parent controller instance
		 */
		protected $parent = null;

		/**
		 * @var \Core\Application Holds the current application instance.
		 */
		protected $iApplication;

		/**
		 * @var \Document Holds the \Document instance
		 */
		protected $iDocument;

		/**
		 * @var \Core\Configuration Holds the \Configuration instance
		 */
		protected $iConfiguration;

		/**
		 * @var \Database\Connection Holds the \Database instance
		 */
		protected $iDatabase;

		/**
		 * @var object $_GET, $_POST, $_FILES and $_COOKIE merged together.
		 */
		protected $request;

		/**
		 * @var string Page title to be displayed
		 */
		protected $title;

		/**
		 * @var array Variable data generated by extending controllers.
		 */
		protected $data = [];

		/**
		 * @var \Core\Theme The current theme instance.
		 */
		protected $iTheme;

		/**
		 * @var array Child controllers classes to be executed when the main one finalizes.
		 */
		protected $children = [];

		/**
		 * Controllers should declare this function instead of a constructor.
		 */
		abstract protected function index();

		/**
		 * Constructs the overall environment, setting up helpers and initial variables.
		 * @return void
		 */
		public function __construct() {
			$this->iApplication  = Resource::get("Core\Application");
			$this->iDatabase 	 = Resource::get("Database\Connection");

			$this->iConfiguration = $this->iApplication->getConfiguration();

			$this->setTitle(array_slice($this->iApplication->getArgs(), -1)[0]);

			if(CLI === false) {
				$this->request = (object) [
					"get" => $_GET,
					"post" => $_POST,
					"files" => $_FILES,
					"cookie" => $_COOKIE
				];

				$this->iAssets = Resource::set(new \Assets);
				$this->iTheme  = Resource::set(new \Core\Theme($this->iConfiguration->get("theme")));
			}
		}
		
		/**
		 * Contains accessible theme variables.
		 * @uses \Document
		 * @return void
		 */
		final public function finalize() : void {
			if(!CLI && $this->getParent() === null) {
				$this->children[] = "Header";
				$this->children[] = "Footer";

				// These are put here, to allow controller methods to add/overwrite assets
				// Child controllers being finalized should not overwrite end up overwriting
				// parent controller stylesheets.
				$this->data["stylesheets"] = $this->iAssets->getStylesheets();
				$this->data["javascript"]  = $this->iAssets->getJavascript("footer");
				$this->data["bodyClasses"] = $this->getBodyClasses();
			}
		}

		/**
		* Provides data set by extending controllers.
		* @return array
		*/
		final public function getData() : array {
			return $this->data;
		}

		/**
		 * Set data in current controller
		 * @param array $data Array of data to set.
		 * @return void
		 */
		final public function setData(array $data) : void {
			$this->data = $data;
		}

		/**
		 * Set current controllers parent.
		 * @param \Controller $iController Controller instance to use as parent.
		 */
		final public function setParent(Controller $iController) {
			$this->parent = $iController;
		}

		/**
		 * Get current parent controller instance
		 * @return \Controller The current parent controller instance, will be null for the root controller.
		 */
		final public function getParent() : ?Controller {
			return $this->parent;
		}

		/**
		 * Set a dynamic value for the title tag.
		 * @param string $title a title to display in a template file.
		 * @return void
		 */
		final public function setTitle(string $title) : void {
			$this->data["title"] = sprintf($this->iConfiguration->get("base_title"), $title);
		}

		/**
		 * Get the current page title to be displayed.
		 * @return string
		 */
		final public function getTitle() : string {
			return $this->data["title"];
		}

		/**
		 * Get called controller name, without 'Controller' appendix
		 * @return string
		 */
		final public function getName() : string {
			return preg_replace("/Controller$/", '',  get_called_class());
		}

		/**
		 * Get the path to a template file, ommit .tpl.php extension
		 * @param string $template name of the template file to get path for,
		 * @return string
		 */
		final public function getView(string $template = null) : string {
			if($template === null) {
				$template = $this->data["view"];
			}

			$view = $this->iTheme->getTemplatePath($template . ".tpl.php");

			return $view;
		}

		/**
		 * Checks if the requested controller has a corresponding view.
		 * @return bool
		 */
		final public function hasView() : bool {
			return file_exists($this->getView()) && !CLI;
		}

		/**
		 * Convenience wrapper, for setting/overriding a view within any controller
		 * @param string name of the view to use, without .tpl.php extensions.
		 * @return bool
		 */
		final public function setView(string $view) : void {
			$this->data["view"] = $view;
		}

		/**
		 * Determines classes suiteable for the <body> tag
		 * These classes can be used for easier identification of controller and view files used
		 * or CSS styling for specific conditions 
		 * @return array
		 */
		final public function getBodyClasses() : string {
			$bodyClasses = [];
			$bodyClasses[] = $this->iApplication->getExecutedControllerName();
			$bodyClasses[] = $this->iApplication->getExecutedControllerName() . '-' . $this->iApplication->getCalledMethodName();

			foreach($this->getChildren() as $childControllerName) {
				$bodyClasses[] = $childControllerName;
			}

			$bodyClasses[] = $this->data["view"];

			foreach($this->iApplication->getArgs() as $arg) {
				$bodyClasses[] = htmlentities($arg); // XSS
			}

			foreach($bodyClasses as $i => $bodyClass) {
				$bodyClasses[$i] = strtolower(($bodyClasses[$i]));
			} 

			return implode(' ', array_unique($bodyClasses));
		}

		/**
		 * Get names of children controllers
		 * @return array
		 */
		public function getChildren() : array {
			return $this->children;
		}
	}